[{"categories":["hugo"],"contents":"如果想要讓訪客針對你的文章發表評論的話我們可以透過 Disqus 或是 Utterances 快速建立評論留言板\n其實一開始建立個人部落格時評論的套件我使用的是disqus，但是我丟到google的 PageSpeed 測試時發現整個網頁的載入時間有大半以上都花在disqus上面且有很多載入後卻沒有使用到，所以之後便決定改用utterances\n另外上網查了相關的文章說disqus有個資相關的問題，文章結尾會附上相關連結有興趣的可以看一下\nUtterances是什麼? utterances是一個基於github issue的套件，其原理是在github上建立一個公開的repo讓訪客可以針對文章在repo上建立相關的issue，接下來就來跟大家介紹如何在頁面上添加utterances\n 在github上建立公開的repository  到utterances安裝頁面後點選install  選擇要安裝utterances的github repo  之後在utterances官網下可以找到區塊進行設置  選擇想要的主題樣式  將產生的script複製下來後放到想要的地方  這樣就完成utterances的設置了\n但要注意utterances是基於github issue所以留言的人需要有github帳號才可以留言\n如果有問題的話歡迎在底下留言\n補充資料 移除disqus留言系統\nThe Problem With Disqus\nWhy I Deleted Disqus and Why You Should Too\n","permalink":"https://bjmqfg83.github.io/blog/hugo_unnerances/","tags":["程式學習"],"title":"如何在hugo上安裝utterances?"},{"categories":["css"],"contents":"當內部元素的寬度超過容器寬度時我們可以使用flex-shrink將內部元素的寬度縮減讓元素不會超過容器\n那flex-shrink到底是怎麼做寬度的縮減?\n基礎公式如下\n元素縮減的寬度 = 超出的總寬度 * 該元素的flex-shrink / 各元素flex-shrink總和\n來看一下code的部分\nCodePen範例連結1 Javascript的部分單純只是獲取元素寬度並放在元素上,可以不看\nHTML、CSS原始碼的部分\n1.元素外部容器的寬度為600px\n2.內部元素每個為300px\n3.flex-shrink為1、2、1\n由於內部元素的總寬度超過容器300px,每個設有flex-shrink的元素寬度都會做縮減,用公式算一下每個元素縮減的多少\n元素1\n75px = 超出的寬度 300px * 各別flex-shrink 1 / flex-shrink總和 4\n元素2\n150px = 超出的寬度 300px * 各別flex-shrink 2/ flex-shrink總和 4\n元素3\n75px = 超出的寬度 300px * 各別flex-shrink 1 / flex-shrink總和 4\n元素寬度為225px、150px、225px,看起來公式沒什麼問題\n如果元素寬度不相同的情況下呢?\n我們先將內部元素寬度設為300px、250px、150px而flex-shrink跟原本一樣為1、2、1\n我們來用公式計算一下\n元素1\n25px = 超出的寬度 100px * 各別flex-shrink 1 / flex-shrink總和 4\n元素2\n50px = 超出的寬度 100px * 各別flex-shrink 2/ flex-shrink總和 4\n元素3\n25px = 超出的寬度 100px * 各別flex-shrink 1 / flex-shrink總和 4\n計算出來的寬度為275px、200px、125px\n那我們現在實際來看一下程式碼\nCodePen範例連結2 實際計算出來的寬為269px、197px、134px,跟用公式算出來的不一樣\n其實我們在網路上看到很多講flex-shrink公式是被簡化過的,只有當元素的寬度都一樣才可以這樣用,實際的公式需要將元素寬度考量進去\n首先先將元素的寬度乘以flex-shrink相加來計算總權重\n總權重 950 = 300px * 1 + 250px * 2 + 150px * 1\n修正的公式如下:\n元素縮減的寬度 = 超出的總寬度 * 各別flex-shrink * 各別元素的寬度 / 總權重\n現在來重新計算縮減的寬度\n元素1\n31.57px = 100px * 1 * 300px / 950\n元素2\n52.63px = 100px * 2 * 250px / 950\n元素3\n15.78px = 100px * 1 * 150px / 950\n計算出來的寬度為268.43px、197.39px、134.22px\n實際來看一下程式碼\nCodePen範例連結2 發現計算出來的寬度有小數點的誤差,不過這點可以忽略不計\n補充章節 如果flex-shrink小於1的狀況?\n如果flex-shrink總和小於1則在收縮寬度時不會收縮超出的總寬度,而是會收縮flex-shrink相對於1的比例\n拿上面的例子做修改\n將flex-shrink設為0.1、0.2、0.3\n收縮的總寬度為超出的總寬度100px * 0.6 / 1 = 60px,帶入原先的公式\n元素縮減的寬度 = 超出的總寬度 * 各別flex-shrink * 各別元素的寬度 / 總權重\n計算新的總權重\n125px = 300px * 0.1 + 250px * 0.2 + 150px * 0.3\n元素1\n14.4px = 60px * 0.1 * 300px / 125\n元素2\n24px = 60px * 0.2 * 250px / 125\n元素3\n21.6px = 60px * 0.3 * 150px / 125\n計算出來的寬度為 285.6px、226px、128.4px\n跟實際的結果會有有零點幾的誤差\nCodePen範例連結3 這篇與其說是文章倒不如說是寫筆記會比較正確\n複習flex時剛好有這個疑問就爬文+問人\n希望能幫助一樣有這個疑問的人\n目前還在研究如何將codepen嵌入hugo,成功後會再將code嵌入頁面 補充資料連結 卡斯柏-圖解：CSS Flex 屬性一點也不難\n詳解flex-grow與flex-shrink\n","permalink":"https://bjmqfg83.github.io/blog/flex-shrink/","tags":["css","flexbox","程式學習"],"title":"Css flex-shrink是怎麼縮的?"},{"categories":["javascript"],"contents":"最近想複習HTML、CSS、Javascript的基礎概念\n所以開始寫六角學院的新手地下城題目\n使用技術:\nJS : let變數、Template literals樣板字串、for迴圈\nCSS: SCSS(CSS前處理語言)、BEM風格規範(其實這我不確定名稱是否有完全符合BEM的規範)\n開發歷程:\n寫的時候覺得麻煩的地方並不在程式邏輯的地方,反而在思考HTML結構、CSS變數命名的地方佔據的大半的時間,總之最後還是完成了,希望日後切板的技術可以越來越純熟\n程式碼:\nhttps://codepen.io/mgnlhdsl/full/NWGObqo\nhttps://bjmqfg83.github.io/multiplication_table/multiplication_table\n","permalink":"https://bjmqfg83.github.io/blog/multiplication_table/","tags":["javascript","程式學習"],"title":"99乘法表-Javascript新手地下城"}]